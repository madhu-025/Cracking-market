# -*- coding: utf-8 -*-
"""stock.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12ZMVGMAxp3DdczNT8MUlhDYC2cYXiH8g
"""

from google.colab import files
uploaded = files.upload()

data = pd.read_csv('stock.csv.csv')

import os
print(os.listdir())

import pandas as pd
data = pd.read_csv('stock.csv.csv')

missing_values = data.isnull().sum()
print(f"Missing values in each column:\n{missing_values}")

duplicate_rows = data.duplicated()
num_duplicates = duplicate_rows.sum()

print(f"Number of duplicate rows: {num_duplicates}")
if num_duplicates > 0:
    print("\nSample duplicate rows:")
    print(data[duplicate_rows].head())
else:
    print("No duplicate rows found.")

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
data_clean = data.fillna(method='ffill')
numeric_data = data_clean.select_dtypes(include=np.number)
plt.figure(figsize=(16, 8))
sns.boxplot(data=numeric_data)
plt.xticks(rotation=90)
plt.title("Boxplots to Detect Outliers")
plt.grid(True)
plt.tight_layout()
plt.show()

from scipy.stats import zscore
z_scores = np.abs(zscore(numeric_data))
threshold = 3
outliers = z_scores > threshold
outlier_counts = outliers.sum(axis=0)

print("Outlier counts per column:")
print(outlier_counts)

from sklearn.preprocessing import StandardScaler
data = pd.read_csv('stock.csv.csv')
numeric_data = data_clean.select_dtypes(include=np.number)
scaler = StandardScaler()
scaled_array = scaler.fit_transform(numeric_data)
scaled_data = pd.DataFrame(scaled_array, columns=numeric_data.columns)
print(scaled_data.head())

import matplotlib.pyplot as plt
scaled_data.hist(bins=30, figsize=(16, 12), edgecolor='black')
plt.suptitle("Histograms of Scaled Numeric Features", fontsize=16)
plt.tight_layout(rect=[0, 0, 1, 0.96])
plt.show()

plt.figure(figsize=(16, 8))
sns.boxplot(data=scaled_data)
plt.xticks(rotation=90)
plt.title("Box Plots of Scaled Numeric Features")
plt.grid(True)
plt.tight_layout()
plt.show()



numeric_features = data_clean.select_dtypes(include='number')
scaler = StandardScaler()
scaled_array = scaler.fit_transform(numeric_features)
print(scaled_array[:5])

data['daily_return'] = (data['Close'] - data['Open']) / data['Open']

print(data.columns)

target='Stock_3'
Features=df.column.drop(target)
print("features:",Features)

import pandas as pd
target='Stock_3'
Features=df.column.drop(target)
print("features:",Features)

import pandas as pd
df = pd.read_csv('stock.csv.csv')

target='Stock_3'
Features=df.column.drop(target)
print("features:",Features)

df['daily_return'] = (df['Stock_3'] - df['Stock_2']) / df['Stock_2']

print('daily_return:',daily_return)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
df = pd.read_csv('stock.csv.csv')

target_col = 'Stock_3'
X = df.drop(columns=[target_col])
y = df[target_col]

categorical_cols = X.select_dtypes(include='object').columns
X_encoded = pd.get_dummies(X, columns=categorical_cols, drop_first=True)

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_encoded)

X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42)

lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

rf_model = RandomForestRegressor(random_state=42)
rf_model.fit(X_train, y_train)

y_pred_rf = rf.predict(X_test)

from sklearn.ensemble import RandomForestRegressor
y_pred_rf = rf.predict(X_test)

def get_metrics(y_true, y_pred):
    mae = mean_absolute_error(y_true, y_pred)
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    r2 = r2_score(y_true, y_pred)
    return round(mae, 2), round(rmse, 2), round(r2, 2)

mae_lr, rmse_lr, r2_lr = get_metrics(y_test, y_pred_lr)
mae_rf, rmse_rf, r2_rf = get_metrics(y_test, y_pred_rf)

rf = RandomForestRegressor(random_state=42)
rf.fit(X_train, y_train)

y_pred_rf = rf.predict(X_test)
importances = rf.feature_importances_

y_pred_rf = rf.predict(X_test)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
mae_rf = mean_absolute_error(y_test, y_pred_rf)
rmse_rf = mean_squared_error(y_test, y_pred_rf, squared=False)
r2_rf   = r2_score(y_test, y_pred_rf)
print(f"RF MAE: {mae_rf:.2f}, RMSE: {rmse_rf:.2f}, RÂ²: {r2_rf:.2f}")
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

importances = rf.feature_importances_
indices = np.argsort(importances)[-10:]
feat_names = X_encoded.columns[indices]

plt.figure(figsize=(8,6))
sns.barplot(x=importances[indices], y=feat_names)
plt.title("Top 10 RF Feature Importances")
plt.tight_layout()
plt.show()

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
mae_rf = mean_absolute_error(y_test, y_pred_rf)
mse_rf = mean_squared_error(y_test, y_pred_rf)
rmse_rf = mse_rf ** 0.5

r2_rf   = r2_score(y_test, y_pred_rf)
print(f"RF MAE: {mae_rf:.2f}, RMSE: {rmse_rf:.2f}, RÂ²: {r2_rf:.2f}")
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

importances = rf.feature_importances_
indices = np.argsort(importances)[-10:]
feat_names = X_encoded.columns[indices]

plt.figure(figsize=(8,6))
sns.barplot(x=importances[indices], y=feat_names)
plt.title("Top 10 RF Feature Importances")
plt.tight_layout()
plt.show()

import gradio as gr
def predict_price(input_sequence):
   return predicted_price
gr.Interface(fn=predict_price, inputs="text", outputs="number").launch(share=True)

!pip install gradio

import gradio as gr

def predict_stock_price(input_data):
     return "Predicted Price: $XXX"
     iface = gr.Interface(
       fn=predict_stock_price,
       inputs="text",
       outputs="text",
       title="Cracking the Market Code",
       description="AI Driven Stock Price Prediction using Time Series Analysis")
iface.launch(share=True)

import gradio as gr

def greet(name):
    return f"Hello {name}!"

iface = gr.Interface(fn=greet, inputs="text", outputs="text")
iface.launch(share=True)

from sklearn.ensemble import RandomForestRegressor
import joblib
model = RandomForestRegressor()
model.fit(X_train, y_train)
joblib.dump(model, "stock_model.pkl")

import gradio as gr
def predict_next_day_price(open_price, high, low, volume):
    import pandas as pd
    input_data = pd.DataFrame([[open_price, high, low, volume]],
                              columns=["Open", "High", "Low", "Volume"])
    prediction = model.predict(input_data)[0]
    return round(prediction, 2)
rface = gr.Interface(
    fn=predict_next_day_price,
    inputs=[
        gr.Number(label="Open Price"),
        gr.Number(label="High"),
        gr.Number(label="Low"),
        gr.Number(label="Volume")
    ],
    outputs=gr.Number(label="Predicted Close Price"),
    title="ðŸ“ˆ Cracking the Market Code",
    description="Enter today's stock data to predict the next closing price."
)
interface.launch(share=True)

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
import joblib
np.random.seed(42)
data = pd.DataFrame({
    "Open": np.random.uniform(100, 200, 100),
    "High": np.random.uniform(100, 200, 100),
    "Low": np.random.uniform(90, 190, 100),
    "Volume": np.random.uniform(1000000, 5000000, 100),
    "Close": np.random.uniform(100, 200, 100)
})
X = data[["Open", "High", "Low", "Volume"]]
y = data["Close"]
model = RandomForestRegressor()
model.fit(X, y)
joblib.dump(model, "stock_model.pkl")





import gradio as gr
model = joblib.load("stock_model.pkl")
def predict_next_day_price(open_price, high, low, volume):
    input_data = pd.DataFrame([[open_price, high, low, volume]],
                              columns=["Open", "High", "Low", "Volume"])
    prediction = model.predict(input_data)[0]
    return round(prediction, 2)
    interface = gr.Interface(
    fn=predict_next_day_price,
    inputs=[
        gr.Number(label="Open Price"),
        gr.Number(label="High Price"),
        gr.Number(label="Low Price"),
        gr.Number(label="Volume")
    ],
    outputs=gr.Number(label="Predicted Close Price"),
    title="ðŸ“ˆ Cracking the Market Code",
    description="Enter today's stock data to predict the next closing price.")

interface.launch(share=True)

!pip install gradio

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
import joblib
np.random.seed(42)
data = pd.DataFrame({
    "Open": np.random.uniform(100, 200, 100),
    "High": np.random.uniform(100, 200, 100),
    "Low": np.random.uniform(90, 190, 100),
    "Volume": np.random.uniform(1000000, 5000000, 100),
    "Close": np.random.uniform(100, 200, 100)
})
X = data[["Open", "High", "Low", "Volume"]]
y = data["Close"]
model = RandomForestRegressor()
model.fit(X, y)
joblib.dump(model, "stock_model.pkl")

import gradio as gr
model = joblib.load("stock_model.pkl")
def predict_next_day_price(open_price, high, low, volume):
    input_data = pd.DataFrame([[open_price, high, low, volume]],
                              columns=["Open", "High", "Low", "Volume"])
    prediction = model.predict(input_data)[0]
    return round(prediction, 2)
interface = gr.Interface(
  fn=predict_next_day_price,
  inputs=[
      gr.Number(label="Open Price"),
      gr.Number(label="High Price"),
      gr.Number(label="Low Price"),
      gr.Number(label="Volume")
    ],
    outputs=gr.Number(label="Predicted Close Price"),
    title="ðŸ“ˆ Cracking the Market Code",
    description="Enter today's stock data to predict the next closing price.")

interface.launch(share=True)

import gradio as gr
import pandas as pd
import joblib
model = joblib.load("stock_model.pkl")
def predict_next_day_price(open_price, high, low, volume):
    input_df = pd.DataFrame([[open_price, high, low, volume]],
                            columns=["Open", "High", "Low", "Volume"])
    prediction = model.predict(input_df)[0]
    return f"Predicted Closing Price: â‚¹{round(prediction, 2)}"
interface = gr.Interface(
    fn=predict_next_day_price,
    inputs=[
        gr.Number(label="Open Price"),
        gr.Number(label="High Price"),
        gr.Number(label="Low Price"),
        gr.Number(label="Volume")
    ],
    outputs=gr.Textbox(label="Prediction"),
    title="ðŸ“ˆ Cracking the Market Code",
    description="Enter today's stock values to predict the closing price using AI-driven time series model.",
    theme="default")
interface.launch(share=True)